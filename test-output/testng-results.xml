<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="2" failed="1" skipped="1">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-12-15T14:26:08 IST" name="Default Suite" finished-at="2024-12-15T14:26:09 IST" duration-ms="1387">
    <groups>
    </groups>
    <test started-at="2024-12-15T14:26:08 IST" name="PlaywrightPageObjectModel" finished-at="2024-12-15T14:26:09 IST" duration-ms="1387">
      <class name="ExceptionWithFailureScreenshot">
        <test-method is-config="true" signature="logWithScreenshot()[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76]" started-at="2024-12-15T14:26:08 IST" name="logWithScreenshot" finished-at="2024-12-15T14:26:08 IST" duration-ms="444" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logWithScreenshot -->
        <test-method signature="failTest()[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76]" started-at="2024-12-15T14:26:08 IST" name="failTest" finished-at="2024-12-15T14:26:09 IST" duration-ms="15" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at ExceptionWithFailureScreenshot.failTest(ExceptionWithFailureScreenshot.java:97)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:65)
at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:105)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- failTest -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76]" started-at="2024-12-15T14:26:09 IST" name="getResult" finished-at="2024-12-15T14:26:09 IST" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=failTest status=FAILURE method=ExceptionWithFailureScreenshot.failTest()[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="navigateToAdminPageTest()[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76]" started-at="2024-12-15T14:26:09 IST" name="navigateToAdminPageTest" description="Dashboard  Feature" finished-at="2024-12-15T14:26:09 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToAdminPageTest -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76]" started-at="2024-12-15T14:26:09 IST" name="getResult" finished-at="2024-12-15T14:26:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=navigateToAdminPageTest status=SUCCESS method=ExceptionWithFailureScreenshot.navigateToAdminPageTest()[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="passTest()[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76]" started-at="2024-12-15T14:26:09 IST" name="passTest" finished-at="2024-12-15T14:26:09 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- passTest -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76]" started-at="2024-12-15T14:26:09 IST" name="getResult" finished-at="2024-12-15T14:26:09 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=passTest status=SUCCESS method=ExceptionWithFailureScreenshot.passTest()[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="skipTest()[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76]" started-at="2024-12-15T14:26:09 IST" name="skipTest" finished-at="2024-12-15T14:26:09 IST" duration-ms="2" status="SKIP">
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[Skipping - This is not ready for testing ]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: Skipping - This is not ready for testing 
at ExceptionWithFailureScreenshot.skipTest(ExceptionWithFailureScreenshot.java:105)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:65)
at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:105)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- skipTest -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76]" started-at="2024-12-15T14:26:09 IST" name="getResult" finished-at="2024-12-15T14:26:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=skipTest status=SKIP method=ExceptionWithFailureScreenshot.skipTest()[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="quit()[pri:0, instance:ExceptionWithFailureScreenshot@49e53c76]" started-at="2024-12-15T14:26:09 IST" name="quit" finished-at="2024-12-15T14:26:09 IST" duration-ms="787" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- quit -->
      </class> <!-- ExceptionWithFailureScreenshot -->
    </test> <!-- PlaywrightPageObjectModel -->
  </suite> <!-- Default Suite -->
</testng-results>
